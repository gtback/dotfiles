# Uncomment to enable profiling of zsh startup
# - https://blog.askesis.pl/post/2017/04/how-to-debug-zsh-startup-time.html
#zmodload zsh/zprof

autoload -Uz compinit
compinit

source <(antibody init)
antibody bundle < ~/.zsh_plugins.txt

setopt NO_NOMATCH

## History file configuration
[ -z "$HISTFILE" ] && HISTFILE="$HOME/.zsh_history"
HISTSIZE=50000
SAVEHIST=10000

## History command configuration
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution
setopt share_history          # share command history data


os=`uname | tr '[:upper:]' '[:lower:]' | sed -e 's/_.*//'`

# From http://dougblack.io/words/zsh-vi-mode.html
bindkey -v
# bindkey '^P' up-history
# bindkey '^N' down-history
bindkey '^j' down-history
bindkey '^k' up-history
bindkey '^?' backward-delete-char
# bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
bindkey '^r' history-incremental-search-backward
export KEYTIMEOUT=1

for dotfile in aliases exports; do
  file="$HOME/.${dotfile}"
  [ -e "${file}" ] && source "${file}"
  [ -e "${file}.${os}" ] && source "${file}.${os}"
  [ -e "${file}.local" ] && source "${file}.local"
done

# https://github.com/zsh-users/zsh-history-substring-search
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# [ -e $POWERLINE/bindings/zsh/powerline.zsh ] && source $POWERLINE/bindings/zsh/powerline.zsh

if [ "$TERM_PROGRAM" == "vscode" ]; then
  echo "Disabling shell environment managers (virtualenvwrapper, nvm, pyenv, rbenv) in Visual Studio Code"
else
  source /usr/local/bin/virtualenvwrapper.sh
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
  if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi
fi
which tmuxp.sh >/dev/null && source tmuxp.zsh

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# Start ssh-agent if it it is not already running.
SSHAGENT=/usr/bin/ssh-agent
SSHAGENTARGS="-s"
if [ -z "$SSH_AUTH_SOCK" -a -x "$SSHAGENT" ]; then
  eval `$SSHAGENT $SSHAGENTARGS`
  trap "kill $SSH_AGENT_PID" 0
fi


function gi() { curl -sLw "\\n" https://www.gitignore.io/api/$@ ;}

# Uncomment to print results of startup profiling
#zprof
