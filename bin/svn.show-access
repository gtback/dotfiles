#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2022 Greg Back <git@gregback.net>
# SPDX-License-Identifier: MIT

'''
Parse an SVN Authz file to show all subpaths a user has access to.

With `colorama` installed, the output will be colored:
- paths with 'rw' access will be in GREEN
- paths with 'r' access will be in YELLOW
- paths with no access will be in RED

The NO_COLOR environment variable (https://no-color.org/) will be respected.

Usage:

    svn.show-access path/to/authz gtback
'''

from collections import defaultdict
from configparser import ConfigParser
import os
import sys

HAS_COLORS = False
try:
    if os.environ.get("NO_COLOR"):
        raise EnvironmentError
    from colorama import init, Fore
    init()
    HAS_COLORS = True
except (ImportError, EnvironmentError):
    pass


def get_color(perms):
    if not HAS_COLORS:
        return ""
    return {
        "rw": Fore.GREEN,
        "r": Fore.YELLOW,
        None: Fore.RED,
    }.get(perms, "")


def main(authz_file_path, user):
    p = ConfigParser()

    with open(authz_file_path) as f:
        p.read_file(f)

    # mapping of users to their groups
    user_groups = defaultdict(list)

    for group, members in p.items("groups"):
        for m in members.split(","):
            user_groups[m.strip()].append(group)

    user_perms = {}
    for section in p.sections():
        if section == "groups":
            continue
        for user_or_group, perms in p.items(section):
            if perms == "":
                perms = None
            if user_or_group == "*":
                user_perms[section] = perms
            if user_or_group.startswith("@"):
                group = user_or_group.lstrip("@")
                if group in user_groups[user]:
                    user_perms[section] = perms
            elif user_or_group == user:
                user_perms[section] = perms

    stack = []
    for path, perms in sorted(user_perms.items()):
        tmp_path = path
        found_prefix = False
        while len(stack) and not found_prefix:
            latest = stack[-1]
            if path.startswith(latest):
                tmp_path = " " * len(latest) + tmp_path[len(latest):]
                found_prefix = True
            else:
                stack.pop()
        stack.append(path)

        print(get_color(perms) + f"{tmp_path}: {perms}")

    return 0

if __name__ == '__main__':
    authz_file = sys.argv[1]
    username = sys.argv[2]
    sys.exit(main(authz_file, username))
