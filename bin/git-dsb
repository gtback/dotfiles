#!/bin/bash

# Delete branches that have been squash-merged into the remote HEAD branch
# (usually `main` or `master`).

# From: https://github.com/not-an-aardvark/git-delete-squashed

# Run with `git dsb`

# shellcheck source=../sh/git.sh
source "${XDG_CONFIG_HOME}/sh/git.sh"

set -euo pipefail

remote=${GIT_DSB_REMOTE:-origin}
head=$(git.remote-head "$remote")
head_ref="remotes/$remote/$head"

# On exit, Check out the remote HEAD branch. Without this you're in a detached-HEAD state.
# This assumes that your local branch is named the same as the remote HEAD branch.
trap 'git checkout "$head"' EXIT

if git checkout -q "$head_ref"; then
    git for-each-ref refs/heads/ "--format=%(refname:short)" \
        | while read -r branch; do
            echo "Checking ${branch}"
            mergeBase=$(git merge-base "$head_ref" "$branch") \
                && [[ $(git cherry "$head_ref" "$(git commit-tree "$(git rev-parse "$branch"^\{tree\})" -p "$mergeBase" -m _)") == "-"* ]] \
                && git branch -D "$branch"
        done
fi
